// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String? @db.VarChar(255)
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String
  avatar_url    String?
  created_at    DateTime  @default(now())
  email         String    @unique
  emailVerified DateTime?
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Book {
  id       Int       @id @default(autoincrement())
  title    String
  author   String
  pdfUrl   String
  coverUrl String
  comments Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  comment   String
  userId    String // Referência ao ID do usuário que fez o comentário
  bookId    Int // Referência ao ID do livro ao qual o comentário pertence
  createdAt DateTime @default(now())

  // Relacionamento com o usuário
  user User @relation(fields: [userId], references: [id])

  // Relacionamento com o livro
  book Book @relation(fields: [bookId], references: [id])
}
